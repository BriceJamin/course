# -*- coding: utf-8 -*-
<hr/>
Variables et objets (1)
=====

Dans quel cas la fonction modifie en place l'objet référencé par la variable var ?

Proposition 1
<pre>
var = [1, 2]
def f():
    var = 20
f()
</pre> 

Proposition 2
<pre>
var = [1, 2]
def f():
    var = [1, 3]
f()
</pre> 

Proposition 3
<pre>
var = [1, 2]
def f():
    var.append(3)
f()
</pre> 

Proposition 4
<pre>
var = [1, 2]
def f():
    global var
    var = 1
f()
</pre> 

Proposition 5
<pre>
var = [1, 2]
def f():
    global var
    var.append(10)
f()
</pre> 

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[ ] Proposition 2
[x] Proposition 3
[ ] Proposition 4
[x] Proposition 5

[explanation]
Ce quiz joue avec les notions de modification d'objets et de références. Une variable référence un objet et l'opération d'affectation permet de changer l'objet référencé par une variable. Par contre, sans changer l'objet référencé par une variable, on peut modifier un objet mutable par effet de bord. Regardons maintenant les différentes propositions. 

La fonction dans la proposition 1 ne modifie pas l'objet puisque la fonction crée une variable locale var distincte de la variable globale var. 

La fonction dans la proposition 2 ne modifie pas non plus l'objet puisqu'ici encore la fonction crée une variable locale var distincte de la variable globale var

La fonction dans la proposition 3 modifie bien en place l'objet référencé par la variable globale var. En effet, la fonction accède à la variable var qui d'après la règle LEG est la variable globale. Ensuite, la fonction fait un append sur var, elle modifie donc en place l'objet référencé par la variable globale var. 

La fonction dans la proposition 4 ne modifie pas l'objet référencé. C'est le cas le plus subtile. La fonction déclare la variable var comme globale, donc, dans la fonction, on modifie bien la variable globale var en lui affectant l'objet entier 1, mais on ne modifie pas en place l'objet initialement référencé par var.

La fonction dans la proposition 5 modifie bien en place l'objet référencé. Dans ce cas, l'utilisation de la directive global est inutile. 
[explanation]

