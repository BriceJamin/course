# -*- coding: utf-8 -*-
<hr/>
Passage d'arguments par défaut
=====

Quelles sont les manières correctes de déclarer un argument var par défaut dans une fonction.

Proposition 1
<pre>
def f(a, b, var == 10):
    print a, b, var
</pre>

Proposition 2
<pre>
def f(a, b, var=10):
    print a, b, var
</pre>

Proposition 3
<pre>
def f(a, var=10, b):
    print a, b, var
</pre>

Proposition 4
<pre>
def f(a, var=10, b=30):
    print a, b, var
</pre>

Proposition 5
<pre>
def f(a, b, var, var=10):
    print a, b, var
</pre>

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[x] Proposition 2
[ ] Proposition 3
[x] Proposition 4
[ ] Proposition 5

[explanation]
La proposition 1 est syntaxiquement incorrecte. On doit déclarer un argument par défaut avec le signe = et non ==.

La proposition 2 est correcte.

La proposition 3 est incorrecte, les arguments par défaut doivent toujours apparaitre après les arguments ordonnés.

La proposition 4 est correcte puisque dans ce cas, b est également un argument par défaut.

La proposition 5 est incorrecte, on ne peut pas dupliquer un argument dans l'entête d'une fonction, ici var est dupliqué. 
[explanation]

<hr/>
Unpacking des arguments
=====

Comment passer les éléments de la liste suivante
<pre>
L = [1, 2, 'a']
</pre>
comme argument de la fonction
<pre>
def f(a, b, c):
    print a, b, c
</pre>

Proposition 1
<pre>
f(L)
</pre>

Proposition 2
<pre>
f(L[0], L[1], L[2])
</pre>

Proposition 3
<pre>
f(*L)
</pre>

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[x] Proposition 2
[x] Proposition 3

[explanation]
La proposition 1 est incorrecte parce que L correspond à un seul argument alors que f attend 3 arguments.

La proposition 2 est correcte, mais pas pythonique. On passe en effet trois arguments à f, par contre, on découpe la liste L à la main, ce qui est presque toujours le signe d'une mauvaise utilisation de python. 

La proposition 3 est correcte et pythonique. On utilise la notion de liste unpacking pour automatiquement passer chaque élément de la liste à un argument de la fonction. 
[explanation]
