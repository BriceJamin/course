# -*- coding: utf-8 -*-
<hr/>
Passage d'arguments par défaut
=====

Quelles sont les manières correctes de déclarer un argument <code>var</code> par défaut dans une fonction.

<h3>Proposition 1</h3>
<pre>
def f(a, b, var == 10):
    print a, b, var
</pre>

<h3>Proposition 2</h3>
<pre>
def f(a, b, var=10):
    print a, b, var
</pre>

<h3>Proposition 3</h3>
<pre>
def f(a, var=10, b):
    print a, b, var
</pre>

<h3>Proposition 4</h3>
<pre>
def f(a, var=10, b=30):
    print a, b, var
</pre>

<h3>Proposition 5</h3>
<pre>
def f(a, b, var, var=10):
    print a, b, var
</pre>

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[x] Proposition 2
[ ] Proposition 3
[x] Proposition 4
[ ] Proposition 5

[explanation]
La proposition 1 est syntaxiquement incorrecte: on doit déclarer un argument par défaut avec le signe = et non ==.

La proposition 2 est correcte.

La proposition 3 est incorrecte, les arguments par défaut doivent toujours apparaitre <b>après</b> les arguments ordonnés.

La proposition 4 est correcte puisque dans ce cas, <code>b</code> est également un argument par défaut.

La proposition 5 est incorrecte, on ne peut pas dupliquer un argument dans l'entête d'une fonction, ici <code>var</code> est dupliqué. 
[explanation]

<hr/>
<em>Unpacking</em> des arguments
=====

Comment passer les éléments de la liste suivante
<pre>
L = [1, 2, 'a']
</pre>
comme arguments de la fonction
<pre>
def f(a, b, c):
    print a, b, c
</pre>

<h3>Proposition 1</h3>
<pre>
f(L)
</pre>

<h3>Proposition 2</h3>
<pre>
f(L[0], L[1], L[2])
</pre>

<h3>Proposition 3</h3>
<pre>
f(*L)
</pre>

Choisissez une ou plusieurs propositions.

[ ] Proposition 1
[x] Proposition 2
[x] Proposition 3

[explanation]
La proposition 1 est incorrecte parce que <code>L</code> correspond à un seul argument alors que <code>f</code> attend 3 arguments.

La proposition 2 est correcte, mais pas pythonique. On passe en effet trois arguments à <code>f</code>, par contre, on découpe la liste <code>L</code> à la main, ce qui est presque toujours le signe d'une mauvaise utilisation de python. 

La proposition 3 est correcte et pythonique. On utilise la notion de <em>unpacking</em> de liste pour automatiquement passer chaque élément de la liste à un argument de la fonction. 
[explanation]
