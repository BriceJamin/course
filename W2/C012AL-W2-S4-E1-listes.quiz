Listes
=====

on a liste = [ 1, 3, 2, 4 ]
On veut modifier liste pour obtenir [ 1, 3, 5, 2, 4 ]

Que faut-il faire (plusieurs réponses possibles):

[ ] liste[2] = 5
[ ] liste[2] = [5]
[x] liste.insert (2,5)
[ ] liste[2:3] = [5]
[x] liste[2:2] = [5]

[explanation]
La première formule remplace 2 par 5, la liste conserve 4 éléments
La seconde, idem mais la liste devient [1, 2, [5], 4]
La troisième est correcte
La quatrième est équivalente à la première, elle remplace 2 par 5
La cinquième est correcte
[explanation]





À nouveau on a liste = [ 1, 3, 2, 4 ]

On souhaite "extraire" et retourner la valeur '1', tout en la retirant de la liste.
Plus précisément on veut affecter à la variable 'suivant' la valeur '1' de telle sorte qu'après l'exécution, liste ne contienne plus que [ 3, 2, 4 ]

Que faut-il faire:

( ) suivant = liste [0]
(x) suivant = liste.pop(0)
( ) del liste[0]
( ) suivant = del liste[0]

[explanation]
La première formule retourne bien '1' mais ne modifie pas la liste
La troisième enlève bien '1' de liste mais ne retourne rien
La dernière formule est syntaxiquement incorrecte
[explanation]




À nouveau on a liste = [ 1, 3, 2, 4 ]

On veut trier la liste en ordre décroissant, sans le besoin de mémoriser l'état initial.

Faut-il faire (plusieurs réponses possibles) :

[x] liste.sort(reverse=True)
[ ] liste.sort()
[ ] sorted (liste, reverse=True)
[x] liste.sort(); liste.reverse()

[explanation]
Il faut bien préciser reverse=True pour obtenir un tri décroissant

Il n'est pas nécessaire ici de copier la liste initiale, c'est pourquoi ce n'est pas une bonne idée d'utiliser sorted.

La dernière formule fonctionne très bien également.
[explanation]




À nouveau on a liste = [ '1', '3', '2', '4' ]

On veut ajouter à la fin de la liste les valeurs '5' et '6' pour obtenir [ '1', '3', '2', '4', '5', '6' ]

Faut-il faire (plusieurs réponses possibles) :

XXX la dernière formule n'est peut-être pas encore connue ??

[x] liste = liste + ['5','6']
[x] liste.extend (['5','6'])
[ ] liste.append (['5','6'])
[x] liste.append('5'); liste.append('6')
[x] liste.extend ('56')
[x] liste += [5,6] 

[explanation]
Toutes les formules sauf la 3 sont correctes

La formule 3 donne pour liste [ 1, 3, 2, 4, [5,6] ]

Notez que la formule 5 fonctionne, car extend attend un iterable (ici un string) et ajoute tous les éléments de cet iterable; on aurait pu utiliser aussi un tuple par exemple.

[explanation]
