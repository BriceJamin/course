# -*- coding: utf-8 -*-
<hr/>
Conditions (1)
=====

Que peut-on dire du code suivant:
<pre>
if 'a' in 'spam':
 print 'oui'
else:
        print 'non'
</pre>

[x] Ce code affiche 'oui'
[ ] Ce code affiche 'non'
[ ] Ce code suit les recommandations de présentation du code en Python
[x] Ce code ne suit pas les recommandations de présentation du code en Python


[explanation]
Ce code est valide, mais ne suit pas les recommandations de présentation du code en Python. En effet, la recommandation est de toujours indenter un bloc d'instructions de 4 caractères vers la droite. 
[explanation]


<hr/>
Conditions (2)
=====

Que va afficher le <code>print x</code>
<pre>
x = ['debut']
if x[0]:
    if x[0][0]:
        x[0] = "spam"
    else:
        x[0] = 'spam-spam'
    if not x[0][5:6]:
        x = True
        if x:
            x = x + 100
    else:
        x = -1
else:
    x = ()

print x
</pre>

( ) <code>()</code>
( ) <code>'spam'</code>
( ) <code>100</code>
(x) <code>101</code>
( ) <code>['debut']</code>

[explanation]
<code>x[0]</code> donne la chaîne 'debut' qui est évaluée à <code>True</code> (puisque seule la chaîne vide
 est évaluée à <code>False</code>).
<code>x[0][0]</code> donne la chaîne <code>'d'</code> qui est également évaluée à <code>True</code>.

<code>x</code> devient donc <code>[ 'spam' ]</code>.

<code>x[0][5:6]</code> est un slice en dehors de la chaîne <code>'spam'</code>, ça donne donc une chaîne vide qui est évaluée à <code>False</code>. Pour finir, <code>True</code> est codée en Python comme un entier de valeur <code>1</code>, donc <code>x + 100</code> retourne <code>101</code>. 
[explanation]
