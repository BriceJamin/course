# -*- eval: (auto-fill-mode 0) -*-
# XXX TODO : numéroter tous les exos

# TITRE SEMAINE 2 : Types de bases 

###################################################################

## Vidéo 1 (Introduction au typage dynamique)

C012AL-W2-S1.txt

## Compléments Vidéo 1

OK noms-variables.ipynb : noms de variables
OK mots-cles.ipynb: liste des mots clés
OK fonction-type.ipynb: type() et premier contact avec isinstance ()

## Quizz Vidéo 1 
OK identifiants.quiz

## Exercices Vidéo 1

###################################################################

## Vidéo 2 (Les types numériques)

C012AL-W2-S2.txt

## Compléments Vidéo 2

OK calculette.ipynb : utiliser python comme une calculette - introduit aussi les conversions
OK affectations-operations.ipynb : illustrer += et les autres variantes, mentionner les autres types  
OK precision-flottants.ipynb : limitation de la précision des floats  
OK entiers-bitwise.ipynb : opérations bitwise : et/ou/ou exclusifs décalages 

## Quizz Vidéo 2 
OK types-numeriques.quiz

## Exercices Vidéo 2 
OK exo-flottants-min.ipynb : exercice pour trouver la valeur approximative du + petit flottant 

###################################################################

## Vidéo 3 (Les séquences)

C012AL-W2-S3.txt

## Compléments Vidéo 3 

OK slicing.ipynb : reprend le slicing 

## Quizz Vidéo 3 

OK generic-slicing.quiz : opérations génériques sur les séquences en prenant une str comme exemple 

## Exercices Vidéo 3 
OK exo-slicing.ipynb: un peu de slicing, et des indices négatifs, le slicing avec pas, utilisation de la longueur

###################################################################

## Vidéo 4 (Les listes)

C012AL-W2-S4.txt (9 minutes)

## Compléments Vidéo 4 
OK: listes-methodes.ipynb: un complément sur les méthodes des listes
OK listes-sort.ipynb : sort avec les paramètres reverse, et sur des strings 

## Quizz Vidéo 4 
OK listes.quiz : pop append extend del sort sorted (j'utilise aussi += a un moment)
xxx -- ?? comparer l.insert (i,shmol) avec l[i:i] = [ shmol ]

## Exercices Vidéo 4 

###################################################################

## Vidéo 5 (Les tuples)

CO12AL-W2-VIDEO05 ()

## Compléments Vidéo 5  

OK tuple-commas : les différentes syntaxes (avec ou sans parenthèses, avec ou sans virgule terminale
                               le cas des tuples à un élément; la fonction tuple pour convertir une liste 
			       digression sur les noms de fonctions prédéfinies

OK affectation-multiple : a,b = tuple - je parle aussi de retrouver 3 dans ['abc', [(1,2), ([3], 4)], 5]

## Quizz Vidéo 5 
OK tuples.quiz

## Exercices Vidéo 5 

###################################################################

## Vidéo 6 (Introduction aux tests if/else et aux expressions conditionnelles)

C012AL-W2-S6.txt (5 minutes 40 secondes)

## Compléments Vidéo 6
OK bool-expressions.ipynb : introduire les opérateurs logiques - expliquer <> pour !=, obsolète mais dans du code ancien 
OK indentations.ipynb : imbrications, espaces vs tabulations, utilisez des indentations de 4 espaces
OK elif.ipynb : if elif else - évaluation paresseuse
OK if-expression.ipynb: return 0 if n<=1 else n*factoriel (n-1)

## Quizz Vidéo 6
# J'arrive un peu à la limite du quiz car je ne sais pas si je peux mettre des réponses
# sur plusieurs lignes dans les questions a choix multiples

## Exercices Vidéo 6
# je postpone à après la vidéo 7 car on aura les fonctions; bref pas d'exo après cette vidéo-là

###################################################################

## Vidéo 7 (Introduction aux boucles for et aux fonctions)

C012AL-W2-S7.txt 

## Compléments Vidéo 7 
OK for-multi.ipynb: affectation a,b dans un for, la fonction zip
OK for-comprehension.ipynb: [ exp(x) for x in .... if ] - XXX reduce ?
OK listes-sort-functions.ipynb : suite de listes-sort: sort avec le paramètre key (une fonction), et sorted 
OK function-return.ipynb : il nous faut 'return' pour les exercices please 
XXX Arnaud : ajouter sur les conventions de style: un espace après les
virgules, en espace avant et après les opérateurs
(a = f(1, 2) + g(3, 4)), un saut
de ligne pour séparer les bloc d'instructions et les fonctions. 

## Quizz Vidéo 7

## Exercices Vidéo 7 
OK exo-if.ipynb : une petite fonction qui calcule si deux entiers sont divisibles ou pas
OK exo-for.ipynb : trier toutes les listes dans une liste; idem avec une direction
XXX Arnaud: montrer une boucle for sur une chaine de caractères.

###################################################################

## Vidéo 8 (Les chaînes de caractères )

C012AL-W2-S8.txt 

## Compléments Vidéo 8 
TODO raw-strings.ipynb - backslashes - \n \t 
OK string-formatting.ipynb : format et % - je laisse tomber rjust/ljust/center pour le moment
OK string-tools.ipynb : # help(str)  #split join  #replace strip #index find rfind count startswith endswith upper lower swapcase capitalize title  renvoi sur la doc
OK raw_input.ipynb

TODO:pending-unicode.ipynb : je propose de bouger ça carrément en semaine 7

# XXX bytearray : je connaissais pas du tout ce truc non plus, après une lecture rapide j'ai le sentiment que ça a / peut avoir un lien avec buffer; je propose de bouger ces deux trucs en semaine 7 - ou de virer complètement, ou d'en parler très très vite. 


## Quizz Vidéo 8
OK strings.quiz - le quiz se prete bien surement aux basiques des strings

## Exercices Vidéo 8
TODO? exo-strings.ipynb il serait peut-être bien de faire faire quelques exos plus construits, mais le quiz est assez limité avec les réponses sur une seule ligne
pour travailler les méthodes du module string principalement
