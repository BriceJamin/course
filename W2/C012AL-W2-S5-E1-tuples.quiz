# -*- coding: utf-8 -*-
<hr/>
Tuples (1)
=====

On se donne en entrée 
<pre>triple = (1,2,3,)</pre>

Parmi les expressions et instructions ci-dessous, lesquelles sont valides

[x] triple[0]
[x] triple[:]
[ ] triple[len(triple)]
[ ] triple[0] = 0

[explanation]
La première expression est correcte et renvoie 1
La seconde expression est correcte et renvoie une copie du tuple
La troisième expression n'est pas valable, "index out of range", triple n'a pas de case numéro 3
L'affection en quatrième place n'est pas autorisée, un tuple est immuable 
[explanation]

<hr/>
Tuples (2)
=====

Quelles sont les expressions qui renvoient True

[x] [ ( [ ('spam') ] ) ] == [ [ 'spam' ] ]
[ ] ('spam',) == ('spam')
[x] [ ('spam',) ] [0][0] == 'spam'
[ ] [ ('spam'), ] [0][0] == 'spam'

[explanation]
Dans la première expression, l'absence de virgule rend les parenthèses vides de sens
Dans la seconde expression la partie droite n'est pas un tuple
Dans la troisième expression, on a une liste contenant un tuple contenant le string, l'expression renvoie True
Dans la quatrième expression, la virgule n'est pas correctement placée et la parenthèse ne crée pas un tuple.
[explanation]

<hr/>
Tuples (3)
=====

On pose
<pre>quadruple = (1, [2, 3], 'spam', [ (4,) ] )</pre>

Quelles sont parmi les affectations suivantes celles qui sont valables, et qui affectent 4 à four

[ ] ( one, (two, three), ignored, ( ( four ) ) ) = quadruple
[x] ( one, (two, three,), _, ( ( four, ), ) ) = quadruple
[ ] ( (one,),  (two, three), _, [ [ four ] ] ) = quadruple
[x] ( one,  (two, three), _, [ [ four ] ] ) = quadruple


[explanation]
Dans la première forme, 'four' ne se trouve pas dans un tuple à cause de l'absence de virgule
La seconde forme est correcte
Dans la troisième forme, 'one' est inclus dans un tuple, ce qui empêche l'affectation de fonctionner
La dernière forme est correcte, malgré la présence d'une liste à gauche et d'un tuple à droite au dernier niveau de profondeur.
[explanation]

<hr/>
Listes
=====

On cherche à écrire un code qui permette d'intervertir les deux derniers éléments dans une liste. On suppose que la liste en entrée a au moins deux éléments. Quelles sont parmi les variantes suivantes celles qui font bien ce qu'on veut

[x] tmp = liste[-1]; liste[-1] = liste [-2]; liste[-2] = tmp
[ ] liste.reverse(-2,-1)
[x] liste[-2],liste[-1] = liste[-1],liste[-2]

[explanation] 
La première formule fonctionne, quoi que pas très "pythonique"
La seconde formule est une invention, list.reverse() n'accepte pas d'argument, comme le montrerait help(reverse)
La dernière formule fonctionne, ce serait notre préférée. Comme on l'a vu déjà, les expressions à gauche de l'affectation sont toutes évaluées, puis l'affectation est réalisée.
[explanation]

