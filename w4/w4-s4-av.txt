# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Portée des variables dans les fonctions : règle LEGB
## Temp total: 9m20s

## Résumé de la vidéo (2m30s)

>>>>>>>>>> W4-S4-AV-slide1.pptx <<<<<<<<<< 

[s1]

Nous avons déjà parlé de la notion de blocs de code. Un [bloc de code]
est un ensemble de lignes de code contigues qui ont la même
indendation et qui sont précédée par un ":", sauf pour le bloc de code
du module qui est lui sans aucune indentation. 

[s2]

On dit qu'une variable est définie lorsqu'elle référence un objet. On
peut par exemple faire [x = 1] pour définir la variable x en lui
faisant référencer l'objet entier 1. Les termes [définition,
affectation, assignation et binding] sont tous équivalents.

La portée d'une variable détermine de quel endroit du code on peut
accéder à une variable qui a été définie. Python utilise ce que l'on
appelle la portée lexicale, c'est-à-dire que la portée d'une variable
est déterminée en fonction du bloc de code dans lequel elle est
définie.

Une variable définie dans le bloc de code d'une fonction sera une
variable locale au bloc de code de cette fonction, ou plus simlement
une variable locale. Elle sera créée à l'appel de la fonction et
détruite lorsque la fonction retourne. Notons qu'une variable définie
dans l'entête de la fonction est également une variable locale à cette
fonction.

Une variable définie en dehors de toute fonction sera une variable
globale.

En résumé, une variable est soit locale lorsqu'elle est définie dans le
bloc de code d'une fonction, soit globale si elle est définie dans un
autre bloc de code. 

Nous allons voir dans cette vidéo la notion de portée des variables
locales et globales. Nous parlerons du cas particulier des classes
dans une prochaine vidéo. 

[s3]

Lorsque l'on référence une variable, c'est-à-dire lorsque l'on utilise
son nom en dehors d'une affectation, Python utilise une règle que l'on
appelle [LEGB]. Lorsque l'on référence une variable, si c'est une
variable locale à une fonction, on la cherche d'abord [localement]
dans bloc de code de cette fonction, puis on la cherche dans les
[fonction englobante] s'il y en a de l'intérieur vers l'extérieur,
ensuite on la cherche [globalement] au niveau des variables globales
du module. Si elle n'est toujours pas trouvée on la cherche en dernier
ressort dans le module [builtins].

En d'autres termes, une variable locale peut être uniquement accédée
dans le bloc de code de sa fonction est dans les blocs de code des
fonctions englobée, c'est-à-dire définie dans la fonction. Une
variable globale peut-être accédée depuis n'importe quel bloc de
code. 

Ouvrons un éditeur IDLE pour commencer à jouer avec la notion de
portée des variables.


>>>>>>>>>> W4-S4-AV-exo1.py <<<<<<<<<< (5 minutes 40)


## conclusion (1m10s)

Il y a ici une subtilité importante. Une variable globale est visible
dans tout le module dans lequel elle est défini. Il n'y a rien de plus
visible ou accessible qu'une variable globale. En particulier, notez
bien qu'une variable définie dans un module ne peut pas être
directement vue dans un autre module. De cette façon, deux variables
de même nom dans deux modules différents peuvent coexiter tout en
étant totalement indépendantes. Ce mécanisme d'isolation que l'on
appelle espace de nommage est une des grandes forces de Python et nous
reviendrons largement dessus dans de prochaines vidéos en expliquant
notamment comment accéder aux variables définies dans un autre module.

On vient de voir la notion de portée des variables et la règle
LEGB. Lorsque vous affectez une variable dans le bloc de code d'une
fonction elle devient locale à cette fonction, sinon la variable sera
globale dans le module. Lorsque l'on référence une variable, on la
cherche d'abord localement, puis dans les fonctions englobante, puis
globalement, et pour finir dans le module builtins.  Prenez le temps
de bien assimiler ces notions. Nous les compléterons dans une
prochaine vidéo lorsque nous parlerons des classes.

À bientôt. 
