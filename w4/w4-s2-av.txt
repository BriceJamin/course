# -*- coding: utf-8 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Les tests if/elif/else et les opérateurs booléens
## Temp total: 7m00

## Résumé de la vidéo (15s)

On a vu dans une précédente vidéo une rapide introduction à
l'instruction if/else. Dans cette vidéo nous allons revenir sur la
syntaxe de if/else et nous allons couvrir tous les types de tests
autorisés avec une instruction.


>>>>>>>>>> W4-S2-AV-slide1.pptx <<<<<<<<<< (6m30s)

[s1]

La syntaxe de if else est la suivante. Nous commençons par une
instruction [if] suivi d'un test. Nous reviendrons dans quelques
instants sur le type de tests autorisés. Vous avez ensuite un bloc
d'instructions qui est exécuté si le test est vrai.
Vous pouvez ensuite avoir un [elif]. Le elif qui veut dire else if, est
évalué uniquement si le ou les tests au dessus sont faux. Le elif est
suivi d'une test. Si ce test est vrai, le bloc d'instruction dans le
elif sera évalué. On peut avoir autant de test [elif], le premier elif
qui aura son test vrai exécutera son bloc d'instruction. Les elif
suivant ne seront pas évalué. Pour finir on peut avoir un [else] qui
sera exécuté si aucun test if et elif n'est vrai.

Pour résumer, dans un if, elif, else, un seul bloc d'instructions au
maximum sera exécuté, ça sera le bloc du premier test vrai ou sinon du
else si tous les tests sont faux.

[s2]

Revenons maintenant sur ce qui est autorisé dans un test. On peut
avoir n'importe quel objet ou expression dans un test.
[[TP tu veux dire une variable ou une expression; et techniquement, une
variable, c'est aussi une expression..; et dans tous les cas, le
résultat de cette évaluation c'est un objet]]
Si cet objet n'est pas un booléen, l'interpréteur
va appeler la fonction built-in bool() sur l'objet.
Si bool() retourne True, le test est validé, sinon, le
test est faux.

[[TP c'est pas un peu tôt pour décrire ces détails là ?]]

La fonction built-in bool() va en fait demander à l'objet de retourner
True ou False, en appelant la méthode spéciale __bool__() sur
l'objet. Si cette méthode n'existe pas sur l'objet, alors la méthode
__len__() qui retourne le nombre d'éléments dans l'objet est
appelée. Lorsque __len__() retourne 0 le test est faux, il est vrai
dans tous les autres cas. La logique derrière l'appel de __len__() est
qu'un objet vide (de longueur 0) est faux. 

Regardons maintentant quelques exemples non-exhaustifs d'objets et
d'expression que l'on trouve fréquement dans un if.


[s3]

Dans un test on peut avoir un [type built-in] comme une liste, un
tuple, une chaîne de caractères, un dictionnaire ou un set. Un type
built-in est faux s'il est vide et vrai sinon. C'est extrêmement utile
en pratique pour exécuter du code que sur des objets qui ne sont pas
vides. Plus précisément, Python considère comme faux 0, None et tous
les autres types built-in vide comme [], {}, () ou '' Regardons un
exemple...


[s4]

Dans un test on peut avoir [une comparaison]: > >= < <= == et !=
(différent). Regardons un exemple...


[s5]

Dans un test on peut avoir [un test d'appartenance] avec l'instruction in
que l'on connait. Regardons un exemple...


[s6]

Dans un test, je peux avoir [un appel de fonction ou de méthode]. On évalue l'objet
retourné par la fonction, et on le transforme en booléen comme on l'a
vu tout à l'heure. Regardons un exemple...  isdecimal()
retourne vrai que si la chaîne de caractère contient un nombre
décimal.


[s7]

Je peux combiner plusieurs tests avec un opérateur de test booléen qui
est and, or, not. Dans la suite A et B sont des tests, donc un objet
ou une expression

[A and B]
[A or B]
[not A]

Regardons un exemple...
Vous pouvez remarquer ici que Python est très proche du langage
naturel ce qui rend l'interprétation du code simple et intuitive.

Regardons maintenant un dernier exemple ou l'on va implémenter une
intelligence artificielle.

## Résumé de la vidéo (15s)

Nous venons de voir l'instruction if elif else qui permet d'exécuter
un bloc de code en fonction d'un test et nous avons vu que Python
autorise un grande variété de tests dans une instruction if elif
else. L'intérêt de cette variété est de permettre comme toujours en
Python d'écrire du code simple et expressif. 

À bientôt.



