# -*- fill-column: 54 -*-
#
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Les boucles for et les itérateurs

# IMHO on a saute l'etape essentielle ici, pourquoi veut-on 
# faire des iterateurs ?
# on pourrait parler de l'optimisation memoire, range() vs. xrange()
# avant de se lancer dans ces details qui sont assez obscurs tout de
# meme...
# AL : non, je ne suis pas convaincu. Oui l'occupation mémoire est 
# importante, mais même sans ça, une interface commune à tous les objets
# pour les parcourir, ça serait déjà suffisant pour justifier les
# itérateurs. C'est à mon avis la grande contribution. Je propose
# de déplacer la discussion de l'occupation mémoire en complément. 


## Résumé de la vidéo (1 minute)

On a vu la semaine dernière une rapide introduction
aux boucles for. On a principalement vu que l'on
pouvait faire directement une boucle for sur une
séquence et que la boucle allait parcourir chaque
élément de la séquence. Mais, la boucle for est
beaucoup plus générale et puissante qu'un simple
parcours de séquences. Une boucle for peut parcourir
n'importe quel objet qui a un itérateur, et la bonne
nouvelle est que tous les types built-in en Python ont
un itérateur (sauf les types numériques par ce qu'ils
ne représentent qu'une seule valeur). La boucle for
permet ainsi d'écrire simplement et rapidement du code
lisible et efficace. Le concept d'itérateur fait
partie des trois grands concepts fondamentaux de
Python avec les références partagées, que nous avons
déjà vu, et les espaces de nommages que nous verrons
prochainement.

Dans cette vidéo, on va approfondir le fonctionnement
des boucles for et explorer le concept
d'itérateur. Ouvrons un terminal pour commencer à
jouer avec les boucles for et les itérateurs...

>>>>>>>>>> CO12AL-W3-VIDEO08-EXO01.py <<<<<<<<<< (3 minutes)

## différence entre un objet qui a un itérateur 
## et un itérateur  (1 minutes 50 seconde)

Nous avons vu comment une boucle for utilisait les
objets qui ont un itérateur, mais nous n'avons
toujours pas défini exactement ce qu'était un
itérateur. 
XXX je ne comprends pas bien cette transision, dans EXO01 on a justement
déjà montré __iter__ et next()

Un itérateur est un objet (en Python tout est un objet
donc ça ne devrait plus vous surprendre qu'un
itérateur soit également un objet) qui a deux
méthodes. Une méthode [__iter__()] qui retourne
l'itérateur lui même et une méthode [next()] qui
retourne un [nouvel élément] à chaque appel et
[StopIteration] lorsqu'il n'y a plus d'éléments.

[[
__iter__()
next()
   *nouvel élément
   *StopIteration
]]

Vous avez peut-être remarqué quelque chose de
bizarre. Un objet qui a un itérateur a une méthode
__iter__() qui retourne l'itérateur, on a vu par
exemple l'appel de la méthode __iter__ sur un set dans
l'exemple précédent. Mais un itérateur a aussi une
méthode __iter__() qui retourne l'itérateur lui
même. Pourquoi est-ce que cette méthode sur
l'itérateur existe ? Elle existe pour vous simplifier
la vie. En effet, une boucle for fait toujours la même
chose, elle appelle la méthode __iter__() sur l'objet,
puis elle appelle la méthode next(). Si vous faîtes
une boucle for sur un objet qui a un itérateur, la
méthode __iter__() va retourner l'itérateur et la
boucle for fonctionnera. Si vous faites une boucle for
sur un itérateur, la méthode __iter__() va retourner
l'itérateur et la boucle for fonctionnera également.

Donc vous n'avez jamais à vous préoccuper de savoir si
votre objet a un itérateur ou est déjà un itérateur,
dans les deux cas, la boucle for pourra l'utiliser.

Ouvrons de nouveau un terminal ...

>>>>>>>>>> CO12AL-W3-VIDEO08-EXO02.py <<<<<<<<<< (3 minutes 30)

Nous venons de voir que le concept d'itérateurs est à
la fois très puissant et très simple. Nous verrons
prochainement comment faire des itérateurs pour vos
propres objets.
