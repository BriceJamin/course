# -*- coding: utf-8 -*-
<hr/>
Itérables (niveau basique)
=====

Parmi les types suivants, lesquels sont des itérables ?

[x] list
[x] tuple
[x] dict
[x] set
[ ] float
[x] str
[ ] complex

[explanation]
On peut itérer sur tous les types de base qui constituent une collection d'autres objets (list, tuple, set)
On peut itérer sur les chaînes de caractères, dans ce cas on balaye autant de sous-chaînes que de caractères
On peut itérer sur les dictionnaires, on balaye alors toutes les clés du dictionnaire

On ne peut pas itérer sur les objets atomiques, en particulier float et complex.
[explanation]

<hr/>
Itérables (niveau intermédiaire)
=====

Est-ce qu'on peut toujours faire une boucle sur un objet qui a une méthode __iter__() qui renvoie un itérateur ?

(x) Oui
( ) Non

[explanation]
Oui, et dans ce cas la boucle for va utiliser cet iterateur pour implementer son parcours.
[explanation]

<hr/>
Si on peut faire une boucle for sur un objet, est-ce qu'il implémente forcément une méthode next() ?

( ) Oui
(x) Non

[explanation]
La méthode next() est requise sur les itérateurs, pas forcément sur les itérables.
[explanation]

<hr/>
Itérateurs (niveau avancé)
=====

Parmi les types suivants, lesquels sont des itérateurs ? N'hésitez pas à vous servir d'un interpréteur python en cas de doute:

[ ] list
[ ] tuple
[ ] dict
[ ] set
[ ] float
[ ] str
[ ] complex

[explanation]
float et complex ne sont pas itérables.
str ne possède pas la méthode __iter__(), c'est un itérable implémenté avec la méthode __getitem__()
S'agissant des 4 types restants (list, tuple, dict et set), les itérateurs sont implémentés comme des objets séparés de l'itérable. Cela permet notamment d'autoriser deux boucles imbriquées sur le même objet.
[explanation]
