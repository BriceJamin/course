<hr/>
Héritage
=====

Supposons que nous ayons le code suivant volontairement obscur.
<pre>
class C:
    def f(self):
        self.x = 1

    def g(self):
        self.y = 1

class A(C):
    def f(self):
        self.x = 2

c = C()
a = A()
c.f()
c.g()
a.f()
a.g()
</pre>

La fonction builtin vars() retourne l'attribut __dict__ sur un objet. 

>>Que retourne vars(c) ?<<
(x) {'y': 1, 'x': 1}
( ) {'y': 1, 'x': 2}
( ) None

[explanation]
c est une instance de la classe C. c.f() appelle la méthode f définie dans la classe C. Cette méthode définit l'attribut x dans l'instance à 1. c.g() appelle la méthode g définie dans la classe C, cette méthode définit l'attribut y dans l'instance à 1.
[explanation]

>>Que retourne vars(a) ?<<
( ) {'y': 1, 'x': 1}
(x) {'y': 1, 'x': 2}
( ) None

[explanation]
a est une instance de la classe A. a.f() appelle la méthode f définie dans la classe A. Cette méthode définit l'attribut x dans l'instance à 2. a.g() appelle la méthode g dans la classe A, mais la méthode g n'est pas définie dans A. Comme A est une sous classe de C, python remonte l'arbre d'héritage et cherche la méthode g dans la classe C. Cette méthode définit l'attribut y dans l'instance à 1
[explanation]

>>Que retourne a.__class__ ?<<
( ) Une référence de la classe C
(x) Une référence de la classe A
( ) Une exception

[explanation]
L'attribut __class__ sur une instance retourne une référence de la classe qui a créé cette instance. 
[explanation]

>>Que retourne A.__bases__ ?<<
(x) Une référence de la classe C
( ) Une référence de l'instance créée par la classe A
( ) Une exception

[explanation]
L'attribut __bases__ sur une classe retourne le tuple des références des super classes de cette classe. 
[explanation]
