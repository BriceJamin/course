# -*- coding: utf-8 -*-
<hr/>
Modules et espaces de nommage 
=====

Dans un fichier <code>spam.py</code> on a 
<pre>
# fichier spam.py
spam = 1
def egg():
    return spam
</pre>

et dans un fichier <code>egg.py</code> on a
<pre>
# fichier egg.py
import spam
egg = 2
def f():
    return spam.egg(), spam.spam, egg
print f()
</pre>

On exécute le fichier <code>egg.py</code> en ligne de commande. Que va imprimer le programme ?

( ) Une exception
( ) La liste <code>[2, 1, 2]</code>
( ) Le tuple <code>(None, 1, 1)</code>
( ) La chaîne de caractère <code>'112'</code>
(x) Le tuple <code>(1, 1, 2)</code>

[explanation]
Le module <code>egg.py</code> importe le module <code>spam</code>. La variable <code>spam</code> dans le module <code>egg</code> permet alors d'accéder à l'espace de nommage du module <code>spam</code>. Par conséquent, <code>spam.egg()</code> appelle la fonction <code>egg</code> dans le module <code>spam</code>. Suivant la règle LEG, la variable <code>spam</code> retournée par la fonction <code>egg</code> est la variable <code>spam</code> du module <code>spam.py</code>, donc <code>1</code>. <code>spam.spam</code> représente la variable <code>spam</code> dans le module <code>spam</code>, et <code>egg</code> est la variable <code>egg</code> dans le module <code>egg</code>. 

Notons que le choix des noms de variables et de modules entraîne volontairement de la confusion pour tester votre compréhension dans ce quiz. Dans un cas réel de programme, on évitera au maximum d'utiliser dans deux modules que l'on écrit des variables avec un nom générique qui ont un rôle différent (entier et fonction pour <code>egg</code>). D'une manière générale, il est souhaitable que le nom du module et de ses attributs soient suffisamment explicites pour comprendre leur rôle sans regarder la documentation (ça n'est évidemment pas le cas ici). 
[explanation]

