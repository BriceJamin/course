# -*- eval: (auto-fill-mode 0) -*-

# TITRE SEMAINE 5 : Modules, classes et espaces de nommage

###################################################################

## Vidéo 1 (Modules et espaces de nommage)
NIVEAU: BASIC

C012AL-W5-S1.txt

## Compléments Vidéo 1

OK C012AL-W5-S1-C1-attributs.ipynb
OK C012AL-W5-S1-C2-globals-locals.ipynb

DROPPED
*parler de l'impossibilité de faire __dict__ du module courant
(en particulier du prompt interactif) et expliquer que l'on 
ne peut y accéder que depuis sys.modules[__name__].__dict__
Citer 
http://docs.python.org/2.6/tutorial/classes.html#id2
http://stackoverflow.com/questions/4877290/what-is-the-dict-dict-attribute-of-a-python-class
pareil
je vais laisser tomber tout ça c'est beaucoup trop bas niveau

## Quizz Vidéo 1

## Exercices Vidéo 1

###################################################################

## Vidéo 2 (Processus d'importation des modules)
NIVEAU: BASIC

C012AL-W5-S2.txt

## Compléments Vidéo 2

OK C012AL-W5-S2-C1-import-extras .ipynb
avancé
. en profiter pour mentionner sys.modules
. parler de sys.builtin_module_names et de, par exemple, math 
et sys, qui sont des modules built-in implémentés en C pour
des questions de vitesse. 

NICETOHAVE C012AL-W5-S2-C2-pyc.ipynb
intermédiaire
*compléter la discussion de la video sur les .pyc. Par exemple,
on peut directement distribuer les .pyc sans les .py

DROPPED *exécuter un module comme un script avec  if __name__ == '__main__':
déjà vu en C012AL-W3-S5-C1-packages.ipynb

## Quizz Vidéo 2

## Exercices Vidéo 2

###################################################################

## Vidéo 3 (Importation de modules et espace de nommage)
NIVEAU: BASIC

C012AL-W5-S3.txt

## Compléments Vidéo 3

OK C012AL-W5-S3-C1-import-as.ipynb

DROPPED - 
Introduire aussi les variables commençant par _ en expliquant que 
l'on ne doit pas les modifier et qu'elles ne sont pas importée par 
un import * - je laisse tomber puisqu'il ne faut pas le faire de toutes façons

## Quizz Vidéo 3

## Exercices Vidéo 3

###################################################################

## Vidéo 4 (Classes, instances et méthodes)
NIVEAU: INTERMEDIAIRE

C012AL-W5-S4.txt

## Compléments Vidéo 4

* introduire getattr() et setattr()
* introduire la notion de variables privées _var
(privée et pas d'import par from mod import *), __var__ 

## Quizz Vidéo 4

## Exercices Vidéo 4

###################################################################

## Vidéo 5 (Héritage)
NIVEAU: INTERMEDIAIRE

C012AL-W5-S5.txt

## Compléments Vidéo 5

*introduire la MRO (Method Resolution Order)
http://python-history.blogspot.fr/2010/06/method-resolution-order.html
(attention cet article parle aussi des nouvelles classes)

*expliquer que seules les classes built-in ne sont pas mutables
parce que sinon ça pourrait rendre l'interpréteur instable. 

*citer (et peut-être discuter en montrer des exemples) 
design patterns et le livre de Gramma et al.

* introduire les variables __var (name mangling)
http://docs.python.org/2/reference/lexical_analysis.html#reserved-classes-of-identifiers

## Quizz Vidéo 5

## Exercices Vidéo 5

###################################################################

## Vidéo 6 (Surcharge d'opérateurs)
NIVEAU: INTERMEDIAIRE

C012AL-W5-S6.txt

## Compléments Vidéo 6

*Citer ce lien pour toutes les surcharges d'opérateurs. 
http://docs.python.org/2/reference/datamodel.html#special-method-names
*couvrir d'autres opérateurs (je couvre __init__ et __str__ en vidéo)
Il faut voir au minimum __call__, __add__, __contains__, __len__, __getattr__,
__nonzero__
* rappeler que le __iter__ est également une surcharge
* parler des fallback 
Itération : __iter__ puis __getitem__
in :  __contains__ puis __iter__ puis __getitem__
Test vrai/faux : __nonzero__ puis __len__ (faux si __len__ retourne 0)
print : __str__ puis __repr__

* parler de __call__ qui transforme une instance en un callable

*parler des optimisations de CPython sur les opérateurs
Plus rapide d'utiliser un opérateur que l'appel direct sur le méthode
>>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "0 in L")
3.1706046182752914
>>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "L.__contains__(0)")
11.681099249275206

## Quizz Vidéo 6

## Exercices Vidéo 6


###################################################################

## Vidéo 7 (Quand utiliser fonctions, modules ou classes ?)
NIVEAU: INTERMEDIAIRE

C012AL-W5-S7.txt

## Compléments Vidéo 7

## Quizz Vidéo 7

## Exercices Vidéo 7


###################################################################

## Vidéo 8 (Assignation et référencement des variables et des attributs)
NIVEAU: INTERMEDIAIRE

C012AL-W5-S8.txt

## Compléments Vidéo 8
citer: 
http://www.python.org/dev/peps/pep-0227/
http://docs.python.org/2.7/reference/executionmodel.html 
http://docs.python.org/2.7/tutorial/classes.html#python-scopes-and-namespaces 

*expliquer ce cas
class A:
    a = 42
    b = list(a + i for i in range(10))
>>>
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    class A:
  File "<pyshell#1>", line 3, in A
    b = list(a + i for i in range(10))
  File "<pyshell#1>", line 3, in <genexpr>
    b = list(a + i for i in range(10))
NameError: global name 'a' is not defined

*faire un notebook sur les règles pour ne pas tomber dans les
cas dangereux:
   -ne jamais utiliser comme nom de variable locale
   un nom qui existe en global
   -toujours mettre la directive global avec l'utilisation
   de la variable.
puis montrer quelques exemples d'erreurs quand on ne suit
pas ses règles
1) binding static au scope local pour les fonction uniquement
(optimisation de CPython) et la fameuse UnboundLocalError
var = 0
def func():
    print var
    var = 1
>>> func()

Traceback (most recent call last):
  File "<pyshell#102>", line 1, in <module>
    func()
  File "C:/Users/alegout/Desktop/test2.py", line 25, in func
    print var
UnboundLocalError: local variable 'var' referenced before assignment

x = "x dans module"
def f():
    if False:
        x = "x dans f()"
    print x
f()
>>> 
Traceback (most recent call last):
  File "C:/Users/alegout/Desktop/temp.py", line 6, in <module>
    f()
  File "C:/Users/alegout/Desktop/temp.py", line 5, in f
    print x
UnboundLocalError: local variable 'x' referenced before assignment

2) le bug http://bugs.python.org/issue532860

3) directive global apres l'utilisation de la variable

## Quizz Vidéo 8

## Exercices Vidéo 8

proposer quelques exercices un peu vicieux (avec des imports, des classes, des fonctions
englobantes, etc.)

