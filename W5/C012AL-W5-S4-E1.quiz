<hr/>
Classes et instances
=====

Supposons que nous ayons le code suivant.
<pre>
class Parser:
    def __init__(self, sep=' '):
        self.sep = sep
        self.parsed_line = ''
        
    def parse(self, line):
        self.parsed_line = [i.strip() for i in line.split(self.sep)
                            if i.strip().isdigit()]

    def __repr__(self):
        if self.parsed_line:
            return ' '.join(self.parsed_line)
        else:
            return ''

test = '123  : fj356:34:fjjd:    707'

p = Parser(':')
p.parse(test)
print p
</pre>

>>Quels objets sont Parser et p ?<<
( ) Parser est une classe et p une chaîne de caractères
( ) Parser est un module et p une classe
( ) Parser et p sont des classes
(x) Parser est une classe et p est une instance

[explanation]
L'instruction class permet de créer des classes. Par conséquent, Parser est bien un objet de type classe. L'objet p est créé par Parser(':'), donc p est une instance de la classe Parser.
[explanation]

>>Que représente l'attribut self ?<<
(x) Une référence vers une instance de la classe Parser
( ) Une référence vers la classe Parser
( ) Une chaîne de caractères
( ) Un mot clef nécessaire pour définir une méthode dans une classe

[explanation]
self représente bien une référence vers une instance de la classe Parser. Cette référence est automatiquement celle de l'instance qui appelle les méthodes de la classe, explicitement comme parse() ou implicitement comme __init__ (lors de la création de l'instance) ou __repr__ (lors d'un print de l'instance). 
[explanation]

>>Que va afficher print p ?<<
( ) Une exception
(x) 123 34 707
( ) None
( ) Une chaîne de caractères vide

[explanation]
La méthode parse() va découper la chaîne test en mots, chaque mot étant séparé par le caractère ':' dans test(line.split(self.sep)), et parse() va enlever tous les espaces autour de chaque mot (i.strip()) et créer une liste ne contenant que les mots qui représentent des nombres (i.strip().isdigit()). On notera que toutes ces opérations peuvent être faites en une seule compréhension de liste. 

La méthode __repr__ appelée par l'instruction print va retourner une chaîne de caractères.
[explanation]

