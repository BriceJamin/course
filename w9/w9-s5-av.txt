# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

##  TITRE : Les métaclasses
## Temp total () 2 parts


## Résumé de la vidéo (50s)


Nous allons aborder dans cette vidéo un des sujets les plus avancés en
Python : les métaclasses. Une métaclasse est un objet qui instancie
les objets classes. En écrivant une métaclasse vous pouvez donc
contrôler la création d'une classe.

À quoi cela peut-il servir ? On peut, par exemple, valider la syntaxe
des méthodes définies dans la classe, générer automatiquement de
nouvelles méthodes, créer automatiquement des property ou des
descripteurs ou changer l'arbre d'héritage. Comme la métaclasse d'une
classe C sera la métaclasse de toutes les sous classes de C, cette
technique de programmation est compatible avec les arbres d'héritage.

Si vous utilisez de grosses librairies ou de gros projets, il est
probable qu'il y a des métaclasses à la manoeuvre.

Dans cette vidéo nous allons vous expliquer la notion de métaclasse
pour vous permettre d'écrire vos propres métaclasse, mais aussi de
comprendre du code utilisant des métaclasses. 

>>>>>>>>>> INCLUDE W9-S6-AV-slide1.pptx () <<<<<<<<<<

## Conclusion()

Les métaclasses représentent un sujet très avancé en Python, mais qui
offre des perspectives nouvelles de programmation. De plus, une
profonde compréhension du langage passe par la compréhension de ce
mécanisme de création des objets. 
