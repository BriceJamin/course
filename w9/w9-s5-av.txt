# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

##  TITRE : Les métaclasses
## Temp total () 2 parts


## Résumé de la vidéo (50s)


Nous allons aborder dans cette vidéo un des sujets les plus avancés en
Python : les métaclasses. Une métaclasse est un objet qui instancie
les objets classes. En écrivant une métaclasse vous pouvez donc
contrôler la création d'une classe.

À quoi cela peut-il servir ? On peut, par exemple, valider que la
syntaxe des noms de méthodes respectent une convention, générer
automatiquement de nouvelles méthodes, créer automatiquement des
property ou des descripteurs ou changer l'arbre d'héritage. Comme la
métaclasse d'une classe C sera la métaclasse de toutes les sous
classes de C, cette technique de programmation est compatible avec les
arbres d'héritage.

Si vous utilisez de grosses librairies ou de gros projets, il est
probable qu'il y a des métaclasses à la manoeuvre.

Dans cette vidéo nous allons vous expliquer la notion de métaclasse
pour vous permettre d'écrire vos propres métaclasse, mais aussi de
comprendre du code utilisant des métaclasses. 

>>>>>>>>>> INCLUDE W9-S6-AV-slide1.pptx () <<<<<<<<<<

NOTE IMPORTANTE: les affichages sont obtenus sur ipython, ils peuvent
être légèrement différent dans le présentation sur l'interpréteur
Python classique.

[s1] -> [s7] description simple des slides

[[TP je joins une suggestion de figure qui peut contribuer à illustrer
tout ça]]

en résumé une classe est un objet qui a pour type type et une instance
est un objet qui a pour type sa classe.

[s8] -> [s9] description simple des slides

[s10]

Résumons, on réserve le terme instance pour les instances de classes
et le mot classe pour les instance de la métaclasse de type.

[s11]

les types et les classes représente exactement la même catégorie
d'objet, ce sont des objets créés par la métaclasse.

[s14]

nous avons deux objets de base en Python. Ces deux objets sont créés
au démarrage de l'interpréteur Python. Essentiellement, type définit
les comportements par défaut (c'est-à-dire les méthodes spéciales)
pour les classes, et objet définit les comportements par défaut pour
les instances. 

########################## PART 1 ###############################

########################## PART 2 ##############################

[s16]: Peut-on écrire nos propres métaclasses pour instancier les
classes ?

[s17]

en créant une métaclasse en C on peut contrôler le mécanisme
d'allocation mémoire. Cela dépasse de beaucoup l'objectif de ce MOOC,
je n'en parlerai pas plus.

[s18] -> [s24] description simple des slides

## Conclusion()

Les métaclasses représentent un sujet très avancé en Python, mais qui
offre des perspectives nouvelles de programmation. De plus, une
profonde compréhension du langage passe par la compréhension de ce
mécanisme de création des objets. 
