# -*- eval: (auto-fill-mode 0) -*-

# TITRE SEMAINE 6 : Conception d'itérateurs et gestion d'exceptions

###################################################################

## Vidéo 1 (Fonctions génératrices)

C012AL-W6-S1.txt

## Compléments Vidéo 1

*parler des expressions génératrice et de leur intérêt (faible occupation
mémoire)
(x**6 + 3*x for x in xrange(100000000))

*redonner le lien vers http://python-history.blogspot.fr/2010/06/from-list-comprehensions-to-generator.html 
déjà cité en W3, VIDEO8
*faire un test de performance avec timeit pour montrer que les 
expressions génératrices sont un peu plus lente que les compréhensions


## Quizz Vidéo 1

## Exercices Vidéo 1


###################################################################

## Vidéo 2 (Conception d'itérateurs)

C012AL-W6-S2.txt

## Compléments Vidéo 2

*Itérateurs et thread. 


## Quizz Vidéo 2

## Exercices Vidéo 2

* dire que comme on a des itérateurs partout en Python, on peut
souvent directement les utiliser. Proposer de réécrire la deuxième
version de Mots avec un itérateur sur la liste de mots. 

Donnes des exos pratiques de création d'objets avec des itérateurs

###################################################################

## Vidéo 3 (Exceptions)

C012AL-W6-S3.txt

## Compléments Vidéo 3

*parler des Warning et du module warning
https://docs.python.org/2.7/library/warnings.html#module-warnings

*donner la référence de la documentation de toutes les 
exceptions built-in https://docs.python.org/2.7/library/exceptions.html#bltin-exceptions
et du tutorial Python sur les exceptions
https://docs.python.org/2.7/tutorial/errors.html

en profiter pour signaler les dangers du except sans clause - parler
du print_exc()

*parler de assert

## Quizz Vidéo 3

## Exercices Vidéo 3



###################################################################

## Vidéo 4 (Conception d'exceptions personnalisées)

C012AL-W6-S4.txt

## Compléments Vidéo 4

* définit __str__ sur SplitError
## Quizz Vidéo 4

## Exercices Vidéo 4

###################################################################

## Vidéo 5 (Context manager)

C012AL-W6-S5.txt

## Compléments Vidéo 5

(à déplacer avec les décorateurs)
 montrer cet exemple et le comparer avec les décorateur

import time
class Timer():    
    def __enter__(self):
        self.start = time.clock()
        return self
    def __exit__(self, *args):
        self.end = time.clock()
        print "duree d'execution : " + \
              str(self.end - self.start)
        return False

with Timer() as t:
    [x ** 3 for x in xrange(1000000)]
    print 1/0

	
## Quizz Vidéo 5

## Exercices Vidéo 5

###################################################################

## Vidéo 6 ()

## Compléments Vidéo 6

## Quizz Vidéo 6

## Exercices Vidéo 6

###################################################################

## Vidéo 7 ()

## Compléments Vidéo 7

## Quizz Vidéo 7

## Exercices Vidéo 7

###################################################################

## Vidéo 8 ()

## Compléments Vidéo 8

## Quizz Vidéo 8

## Exercices Vidéo 8

