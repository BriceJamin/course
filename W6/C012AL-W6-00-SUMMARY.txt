# -*- eval: (auto-fill-mode 0) -*-

# TITRE SEMAINE 6 : Conception d'itérateurs et gestion d'exceptions

###################################################################

## Vidéo 1 (Fonctions génératrices)
NIVEAU: INTERMEDIAIRE

C012AL-W6-S1.txt

## Compléments Vidéo 1

OK (S1-C1-)Complement-expressions-generatrices.ipynb 
*parler des expressions génératrice et de leur intérêt (faible occupation
mémoire)
(x**6 + 3*x for x in xrange(100000000))

*Donner le lien vers http://python-history.blogspot.fr/2010/06/from-list-comprehensions-to-generator.html 
pour une discussion intéressante sur la compréhension, les expression génératrice et Python 2 et 3.
*faire un test de performance avec timeit pour montrer que les 
expressions génératrices sont un peu plus lente que les compréhensions

## Quizz Vidéo 1

## Exercices Vidéo 1


###################################################################

## Vidéo 2 (Conception d'itérateurs)
NIVEAU: AVANCÉ

C012AL-W6-S2.txt

## Compléments Vidéo 2

*Itérateurs et thread ?
*module itertools / illustrer (avancé) avec un iterateur sur les permutations qu'on écrit nous-mêmes

## Quizz Vidéo 2

## Exercices Vidéo 2

* dire que comme on a des itérateurs partout en Python, on peut
souvent directement les utiliser. Proposer de réécrire la deuxième
version de Mots avec un itérateur sur la liste de mots. 

Donnes des exos pratiques de création d'objets avec des itérateurs

###################################################################

## Vidéo 3 (Exceptions)
NIVEAU: BASIC

C012AL-W6-S3.txt

## Compléments Vidéo 3

la pile; montrer la pile lorsqu'on attrape une exception
pourquoi ne pas mentionner le debugger ?

*parler des Warning et du module warning
https://docs.python.org/2.7/library/warnings.html#module-warnings

*donner la référence de la documentation de toutes les 
exceptions built-in https://docs.python.org/2.7/library/exceptions.html#bltin-exceptions
et du tutorial Python sur les exceptions
https://docs.python.org/2.7/tutorial/errors.html

en profiter pour signaler les dangers du except sans clause - parler
du print_exc()

*parler de assert

## Quizz Vidéo 3

## Exercices Vidéo 3



###################################################################

## Vidéo 4 (Conception d'exceptions personnalisées)
NIVEAU: INTERMEDIAIRE

C012AL-W6-S4.txt

## Compléments Vidéo 4

* définit __str__ sur SplitError
## Quizz Vidéo 4

## Exercices Vidéo 4

###################################################################

## Vidéo 5 (Context manager)
NIVEAU: BASIC

C012AL-W6-S5.txt

## Compléments Vidéo 5

*en complément introduire le module logging (ça va bien ici, mais
si ça fait trop de compléments, on peut le bouger en semaine 6 ou 7)
avec les références https://docs.python.org/2/library/logging.html
et https://docs.python.org/2/howto/logging.html#logging-basic-tutorial

## Quizz Vidéo 5

## Exercices Vidéo 5

###################################################################

## Séquence ajoutée 'suppléments'

OK (S6-C1-)Complement-expressions-regulieres.ipynb 
ONGOING (S6-E1-)Exercice-expressions-regulieres.ipynb

ONGOING (S6-M1-)Mini-projets-intro.ipynb
ONGOING (S6-M2-)Mini-projet-disk-usage.ipynb
ONGOING (S6-M3-)Mini-projet-crawler.ipynb
ONGOING (S6-M4-)Mini-projet-meteo-data.ipynb
