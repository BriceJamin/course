## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Context manager

## Sujet de la vidéo ()

Nous avons vu lorsque l'on a parlé des exceptions que la 
clause finally permettait d'exécuter des instructions 
même en cas d'exception non capturée. L'idée principale
de la clause finally est que certains objets doivent
recevoir certaines opérations de nettoyage avant de quitter 
le programme. C'est en particulier le cas pour tous les 
objets qui existent à la fois dans le programme mais aussi 
à l'extérieur comme les fichiers, les serveurs accédés 
par le réseaux, ou des périphériques. En cas de plantage
du programme, on ne doit pas laisser cet objet à l'extérieur
croire que le programme tourne toujours et à besoin
d'un accès sur l'objet.

Il y a cependant un problème avec la clause finally : il faut
que le programmeur sache exactement quelles opérations faire
pour, par exemple, libérer un fichier. Pourtant personne n'est 
mieux placé que le concepteur de l'objet pour savoir comment 
le libérer. De plus, si le processus de libération change avec
une évolution de l'objet, tout le code utilisant cet objet
devra être mis à jour.

L'idéal serait que Python permettent on concepteur d'un objet
de définir des opérations pour libérer l'objet directement 
dans l'objet et que l'utilisateur
de l'objet n'est qu'à utiliser une instruction qui dit libère
l'objet, indépendamment du type d'objet. 

C'est exactement ce qui a été introduit dans Python 2.5 avec les
[context manager]. De même qu'un objet définit un [itérateur]
s'il implémente les méthodes [__iter__()] et [next()], un objet 
définit un [context manager] s'il implémente les méthodes 
[__enter__()] et [__exit__()]. On exécute un contexte manager
avec l'instruction with as qui est suivi d'un bloc d'instruction. 
La méthode __enter__() est exécutée avant la première ligne du bloc
d'instruction et la méthode __exit__() est exécutée après la 
dernière ligne do bloc d'instructions, même s'il y a une exception. 

[[
Context manager

Itérateur
   * __iter__()
   * next()

Context manager
   * __enter__()
   * __exit__()
]]

Ouvrons un terminal pour jouer avec les context manager...

>>>>>>>>>> INCLUDE CO12AL-W6-VIDEO05-EXO01.py () <<<<<<<<<<


## Conclusion ()

