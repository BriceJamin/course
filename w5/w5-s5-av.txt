# -*- coding: utf-8 -*-
# -*- fill-column: 54 -*-
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à synchroniser avec les slides. [SB] signifie slide blanc,
## c'est à dire qu'il n'y pas de transparent affiché à ce moment (ou
## un transparent blanc). [Si] signifie que l'on doit se trouver sur
## le slide i

## TITRE : Modules et espaces de nommage
## Temp total: (10m00)

## Sujet de la vidéo (1m30s)

Lorsque nous avons parlé de la notion de portée de variables, nous
avons vu que l'on pouvait avoir une variable locale et une variable
globale de même nom dans un même module. Nous avons également expliqué
que chaque module avait ses propres variables globales qui étaient
totalement isolées les unes des autres. Donc deux modules A et B dans
un même programme peuvent tous les deux définir une variable globale
x, et les deux variables globales pourront coexister sans risque.

Mais quel est ce mécanismes qui permet l'isolation des variables ?
C'est ce que l'on appelle les espaces de nommage. Un espace de nommage
est un espace qui regroupe un ensemble de variables référençant des
objets. Chaque module, chaque fonction, et nous verrons plus tard,
chaque classe et instance, a son propre espace de nommage.

Dans les langages qui ne sont pas orientés objets, comme le C, il n'y
a pas de notion d'espace de nommage. Cela complique le rôle du
programmeur qui doit s'assurer de ne pas avoir des variables globales
de même nom dans tout son programme. Dans les langages orienté objets
comme Java, on doit créer des classes pour avoir des espaces de
nommage. C'est également une tache supplémentaire pour le développeur
qui doit créer une classe dès sa première ligne de code.

En Python, comme chaque module définit son espace de nommage, on a une
isolation automatique et naturelle des variables globales par
fichier. On voit donc que les modules sont bien plus que de simples
boites à outils, ce sont de véritables objets qui permettent
l'isolation des variables globales dans des espaces de nommages.

Nous allons voir maintenant comment les modules isolent les variables
dans des espaces de nommage et comment on peut accéder aux variables
d'un autre module. 

>>>>>>>>>> INCLUDE W5-S5-AV-slide1.pptx (7 minutes) <<<<<<<<<<

[s1]

Commençons par créer un fichier [spam.py] et dans ce fichier nous
allons créer un variable [x] et une fonction [f()], puis nous allons
créer un fichier [egg.py] dans le même répertoire que spam.py  qui
[importe le module spam], crée un variable [x] et une fonction
[f]. Puis on appelle [f()], [spam.f()] et on affiche [spam.x].

Un point clef de cet exemple est que les variable f et x sont définies
à la fois dans spam et dans egg. Vous allez voir que grâce au
mécanisme des espaces de nommage, il n'y aura jamais aucune ambiguïté
sur la variable à laquelle on veut accéder. 

Pour finir, ouvrons un terminal de commande (cmd sous windows, ou bash
sous Linux) dans le répertoire des deux fichiers. Puis exécutons la
commande [python egg.py]. N'hésitez pas à mettre la vidéo en pause
pour avoir le temps de créer ces deux fichiers et nous nous retrouvons
tout de suite. 

[s2]

Regardons maintenant ce qui ce passe lors de l'interprétation de ce
code.

Nous avons deux espaces de nommage, un espace pour spam et un espace
pour egg. Rappelons que l'on peut définir des variables globales de
même nom dans des modules différents sans risque de collision.

La [flèche rouge] représente la ligne exécutée par l'interpréteur
Python. Commençons donc l'exécution. L'interpréteur exécute toujours
le code d'un module de manière séquentielle de la première à la
dernière ligne de code.

La première ligne exécutée est import spam, cette instruction va
évaluer le code du fichier spam.py pour créer l'objet
module. L'interpréteur va donc suspendre l'évaluation de egg.py et
passer à spam.py.

Dans le fichier spam.py, on a [x =1], on va donc créer un objet entier
[1] puis une variable [x] dans l'espace de nommage de spam qui va
référencer cet objet. Ensuite on définie une fonction [f]. Lors que
l'importation, l'interpréteur Python va créer un objet fonction, mais
le bloc de code de la fonction ne sera évalué qu'à l'appel de cette
fonction.  On crée donc un [objet fonction], puis une variable [f]
dans l'espace de nommage de spam qui référence l'objet fonction.

Maintenant que le module spam a été interprété, on crée [l'objet
module] et la variable [spam] dans l'espace de nommage de egg qui
référence l'objet module. Puis on crée l'entier [2] et la variable [x]
dans l'espace de nommage de egg qui référence l'entier 2. Pour finir
on crée un [objet fonction], puis un variable [f] dans l'espace de
nommage de egg qui référence l'objet fonction.

Que se passe-t-il maintenant à l'appel de f(). Je suis ici la règle de
la portée des variable LEGB. f est une variable locale qui définie un
objet fonction, j'exécute donc la fonction référencée par la variable
f dans l'espace de nommage de egg.

La fonction fait un print de x, ici encore j'applique la règle LEGB. x
n'est pas une variable locale, c'est une variable locale qui référence
l'entier 2.

Ensuite j'exécute [spam.f()]. Cette notation "." veut dire accède à la
variable f dans l'espace de nommage de spam. Prenons quelque instants
pour expliquer plus en détail cette notation. Lorsque j'appelle
spam.f, je dis que f est un attribut de spam, f n'est plus recherché
alors avec la règle LEGB des variables, mais uniquement parmi les
variables globales de spam. C'est cette notation qui me permet
d'accéder aux variables globales --- on dit au attributs --- d'autres
modules.

J'exécute donc la fonction référencée par la variable f dans l'espace
de nommage de spam. Cette fonction fait un print de x. Comme x est une
variable, j'utilise la règle LEGB. x référence donc l'objet entier
1.

Lorsque je fait [print de spam.x], je cherche donc l'attribut x dans
l'espace de nommage de spam, x référence là encore l'entier 1. 


C'est important de comprendre que les espaces de nommage isolent
uniquement les variables, mais pas les objets. Il est possible d'avoir
des références partagées par des attributs dans différents espaces de
nommage vers le même objet. Si l'objet est mutable, il peut alors être
modifié depuis un espace de nommage et sera vu modifié par tous les
autres.

[s3]

La notation [objet.attribut] permet d'accèder à l'attribut dans
l'espace de nommage de l'objet. Cette notation fonctionne pour
n'importe quel objet Python. Lorsque l'objet est un module, on accède
uniquement aux variables globales du module. On verra lorsque l'on
parlera des classes et des instances que ces objets définissent
également leur propre espace de nommage auquel on peut accéder par
cette notation, mais avec une règle de recherche d'attribut
différente.

## Discussion implémentations des espaces de nommage (1m00)

Comment est-ce que Python implémente les espaces de nommage ? En fait,
comme tout en Python, un espace de nommage est un objet. Il s'agit en
fait d'un objet que vous connaissez bien puisque les espaces de
nommages sont implémenté avec un dictionnaire. Chaque clef est une
chaîne de caractère qui représente un nom de variable et chaque valeur
est une référence de l'objet référencé par la variable.

Donc, à chaque fois que vous définissez une variable globale dans un module,
l'interpréteur va automatiquement créer un entrée de le dictionnaire
de l'espace de nommage du module. Et lorsque vous définissez une
variable locale dans une fonction, l'interpréteur va automatiquement
créer une entrée dans l'espace de nommage de la fonction au moment de
l'appel de cette fonction. Notons que l'espace de nommage de la
fonction est automatiquement détruit au retour de la fonction.

Une référence d'une variable consiste à chercher le bon espace de
nommage avec la règle LEGB puis à chercher l'objet référencé dans le
dictionnaire en utilisant le nom de variable comme clef. 

## Conclusion (30)

En résumé, les espaces de nommage permettent une parfaite isolation
des variables. Mais, on peut accéder à toutes les variables de
l'espace de nommage d'un autre module en utilisant le nom du module
point le nom de la variable, du moment que le module a été importé
avant. Cette isolation des espaces de nommage est une des grandes
forces de Python puisque l'accès à une variable en dehors de son
espace de nommage doit toujours être fait explicitement en spécifiant
le nom l'espace de nommage auquel on souhaite accéder. 

À bientôt
