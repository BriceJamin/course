# -*- coding: utf-8 -*-
# -*- eval: (auto-fill-mode 0) -*-
###################################################################

# Vidéo 1 (Classes, instances et méthodes)
NIVEAU: BASIC

## Compléments Vidéo 1

   * introduire les properties et notamment qu'on n'a pas besoin de
     setter et getter tout le temps.

  * références importantes sur les espaces de nommage
  https://docs.python.org/3.6/tutorial/classes.html#python-scopes-and-namespaces
  https://docs.python.org/2.6/reference/executionmodel.html

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * OK (S4-C1-)Complement-introduction-classes.ipynb

   * OK (S4-C2-)Complement-module-datetime.ipynb mentionner datetime
     vs time()
 
   * OK (S4-C3-)Complement-record-et-classe.ipynb je laisse tomber ce
     lien; je ne suis meme pas sur de tout comprendre la-dedans
     https://docs.python.org/2/tutorial/classes.html#odds-and-ends

   * OK (S4-C4-)Complement-attributs-classe-instance.ipynb
     intermédiaire montrer les attributs de classe et les attributs
     d'instance sur un exemple par exemple Matrix2.template pour une
     mise en forme..  ou trouver mieux monter qu'on peut faire
     self.template aussi bien que Matrix2.template


## Quizz Vidéo 1

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * OK W5-S4-E1.quiz

## Exercices Vidéo 1

   Pour mémoire, exercices du précédent MOOC sur Python 2
   *


###################################################################

# Vidéo 2 (Méthodes spéciales)
NIVEAU: BASIC

## Compléments Vidéo 2

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * ONGOING (S6-C1-)Complement-surcharge-operateurs-1.ipynb

   * Citer ce lien pour toutes les surcharges d'opérateurs.
     http://docs.python.org/2/reference/datamodel.html#special-method-names

     Il faut voir au minimum  __getattr__,
     illustrer __getattr__ avec un proxy xmlrpc

   * parler des fallback 
     Itération : __iter__ puis __getitem__
     in :  __contains__ puis __iter__ puis __getitem__
     Test vrai/faux : __nonzero__ puis __len__ (faux si __len__ retourne 0)
     print : __str__ puis __repr__

   * parler des optimisations de CPython sur les opérateurs
     Plus rapide d'utiliser un opérateur que l'appel direct sur le méthode
     >>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "0 in L")
     3.1706046182752914
     >>> timeit.timeit(setup = "L = range(1000)", number = 100000000, stmt = "L.__contains__(0)")
     11.681099249275206


## Quizz Vidéo 2

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 2

   Pour mémoire, exercices du précédent MOOC sur Python 2
   * ONGOING (S6-E1-)Exercice-classes.ipynb

   je pense qu'en guise d'exercice je vais leur mitonner un mini-projet 
   un truc à base des données de marine (une classe bateau, une classe position, une classe mouvement)
   il n'y aurait alors pas de correction en ligne, mais plutôt
   . un énoncé où on liste les classes et les modules qu'il faut écrire et les méthodes clé 
   . un bout de code qui utilise ces classes pour faire quelque (genre dessiner les positions des bateaux dans matplotlib)
   . et un corrigé la semaine suivante

   Les etudiants pourraient 
   * télécharger le code python qui va avec le notebook de l'exercice
   * ecrire leur code a eux sur leur ordi dans les modules specifies
   jusqu'a ce que ca donne le resultat escompte



###################################################################

# Vidéo 3 (Héritage)
NIVEAU: BASIC

## Compléments Vidéo 3

   * Parler de l'héritage des built-ins et en particulier les immuables
   (  new  )

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * OK (S5-C1-)Complement-heritage.ipynb
   * DROPPED peut-être citer / discuter en montrer des exemples
     design patterns et le livre de Gamma et al.
   * OK (S5-C2-)Complement-classes-new-style.ipynb
   * OK (S5-C3-)Complement-heritage-multiple.ipynb
   * OK (S5-C4-)Complement-heritage-typage.ipynb

## Quizz Vidéo 3

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * batir quelque chose avec des exemples simples de code 
   * OK W5-S5-E1.quiz


## Exercices Vidéo 3

   Pour mémoire, exercices du précédent MOOC sur Python 2
   *


###################################################################

# Vidéo 4 (Héritage multiple et ordre de résolution des attributs)
NIVEAU: BASIC

## Compléments Vidéo 4

   * Parler de la MRO
   * Parler de super()

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * 

## Quizz Vidéo 4

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 4

   Pour mémoire, exercices du précédent MOOC sur Python 2
   *



###################################################################

# Vidéo 5 (Définition et référencement des variables et des attributs)
NIVEAU: BASIC

## Compléments Vidéo 5

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * NICETOHAVE: un complement qui explique qu'on n'a pas besoin de 'global' si on code proprement

citer: 
http://www.python.org/dev/peps/pep-0227/
http://docs.python.org/2.7/reference/executionmodel.html 
http://docs.python.org/2.7/tutorial/classes.html#python-scopes-and-namespaces 

*expliquer ce cas
class A:
    a = 42
    b = list(a + i for i in range(10))
>>>
Traceback (most recent call last):
  File "<pyshell#1>", line 1, in <module>
    class A:
  File "<pyshell#1>", line 3, in A
    b = list(a + i for i in range(10))
  File "<pyshell#1>", line 3, in <genexpr>
    b = list(a + i for i in range(10))
NameError: global name 'a' is not defined

*faire un notebook sur les règles pour ne pas tomber dans les
cas dangereux:
   -ne jamais utiliser comme nom de variable locale
   un nom qui existe en global
   -toujours mettre la directive global avec l'utilisation
   de la variable.
puis montrer quelques exemples d'erreurs quand on ne suit
pas ses règles
1) binding static au scope local pour les fonction uniquement
(optimisation de CPython) et la fameuse UnboundLocalError
var = 0
def func():
    print var
    var = 1
>>> func()

Traceback (most recent call last):
  File "<pyshell#102>", line 1, in <module>
    func()
  File "C:/Users/alegout/Desktop/test2.py", line 25, in func
    print var
UnboundLocalError: local variable 'var' referenced before assignment

x = "x dans module"
def f():
    if False:
        x = "x dans f()"
    print x
f()
>>> 
Traceback (most recent call last):
  File "C:/Users/alegout/Desktop/temp.py", line 6, in <module>
    f()
  File "C:/Users/alegout/Desktop/temp.py", line 5, in f
    print x
UnboundLocalError: local variable 'x' referenced before assignment

2) le bug http://bugs.python.org/issue532860

3) directive global apres l'utilisation de la variable


## Quizz Vidéo 5

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 5

   Pour mémoire, exercices du précédent MOOC sur Python 2
   
   * proposer quelques exercices un peu vicieux (avec des imports, des
     classes, des fonctions englobantes, etc.)



###################################################################

# Vidéo 6 (Conception d'itérateurs)
NIVEAU: BASIC

## Compléments Vidéo 6

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * Itérateurs et thread ?
   * module itertools / illustrer (avancé) avec un iterateur sur les
   permutations qu'on écrit nous-mêmes 

## Quizz Vidéo 6

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 6

   Pour mémoire, exercices du précédent MOOC sur Python 2
   
   * dire que comme on a des itérateurs partout en Python, on peut
     souvent directement les utiliser. Proposer de réécrire la
     deuxième version de Mots avec un itérateur sur la liste de mots.

     Donnes des exos pratiques de création d'objets avec des itérateurs


###################################################################

# Vidéo 7 (Conception d'exceptions personnalisées)
NIVEAU: BASIC

## Compléments Vidéo 7

   Pour mémoire, notebook du précédent MOOC sur Python 2
   * définit __str__ sur SplitError

## Quizz Vidéo 7

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 7

   Pour mémoire, exercices du précédent MOOC sur Python 2
   *


###################################################################

# Vidéo 8 (Conception de context manager)
NIVEAU: BASIC

## Compléments Vidéo 8

   * parler de
     https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
     pour faire une contexte manager avec un décorateur et une
     fonction génératrice
  
   * parler de
     https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator
     peut-être n'en parler que lorsque nous parlerons des décorateurs.


   * PEP 343 contains a lot of very nice exemples of context manager,
     we might build on it for exercices
     https://www.python.org/dev/peps/pep-0343/

   Pour mémoire, notebook du précédent MOOC sur Python 2
   
   * en complément introduire le module logging (ça va bien ici, mais
     si ça fait trop de compléments, on peut le bouger en semaine 6 ou
     7) avec les références
     https://docs.python.org/2/library/logging.html et
     https://docs.python.org/2/howto/logging.html#logging-basic-tutorial

## Quizz Vidéo 8

   Pour mémoire, quizz du précédent MOOC sur Python 2
   * 

## Exercices Vidéo 8

   Pour mémoire, exercices du précédent MOOC sur Python 2
   *
